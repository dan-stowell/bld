[
  {
    "name": "rules_go",
    "full_name": "bazel-contrib/rules_go",
    "description": "Go rules for Bazel",
    "stargazers_count": 1443,
    "module_snippet": "bazel_dep(name = \"rules_go\", version = \"0.52.0\")\r\n",
    "registry": {
      "language": "go",
      "extensions": [
        ".go"
      ],
      "dep_files": [
        "go.mod"
      ]
    }
  },
  {
    "name": "rules_nodejs",
    "full_name": "bazel-contrib/rules_nodejs",
    "description": "NodeJS toolchain for Bazel.",
    "stargazers_count": 751,
    "module_snippet": "bazel_dep(name = \"rules_nodejs\", version = \"6.5.0\")\n"
  },
  {
    "name": "rules_rust",
    "full_name": "bazelbuild/rules_rust",
    "description": "Rust rules for Bazel",
    "stargazers_count": 747,
    "module_snippet": "bazel_dep(name = \"rules_rust\", version = \"0.63.0\")\n",
    "registry": {
      "language": "rust",
      "extensions": [
        ".rs"
      ],
      "dep_files": [
        "Cargo.toml"
      ]
    }
  },
  {
    "name": "rules_foreign_cc",
    "full_name": "bazel-contrib/rules_foreign_cc",
    "description": "Build rules for interfacing with \"foreign\" (non-Bazel) build systems (CMake, configure-make, GNU Make, boost, ninja, Meson)",
    "stargazers_count": 714,
    "module_snippet": "bazel_dep(name = \"rules_foreign_cc\", version = \"0.15.1\")\r\n"
  },
  {
    "name": "rules_python",
    "full_name": "bazel-contrib/rules_python",
    "description": "Bazel Python Rules",
    "stargazers_count": 626,
    "module_snippet": "bazel_dep(name = \"rules_python\", version = \"1.5.3\")\n\npython = use_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")\npython.toolchain(\n    python_version = \"3.13\",\n)\n\npip = use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\")\npip.parse(\n    hub_name = \"pypi\",\n    python_version = \"3.13\",\n    requirements_lock = \"//:requirements_lock.txt\",\n)\n\nuse_repo(pip, \"pypi\")\n",
    "registry": {
      "language": "python",
      "extensions": [
        ".py"
      ],
      "dep_files": [
        "requirements.txt",
        "pyproject.toml"
      ]
    }
  },
  {
    "name": "rules_xcodeproj",
    "full_name": "MobileNativeFoundation/rules_xcodeproj",
    "description": "Bazel rules for generating Xcode projects.",
    "stargazers_count": 583,
    "module_snippet": "bazel_dep(name = \"rules_xcodeproj\", version = \"3.1.2\")\r\n"
  },
  {
    "name": "rules_apple",
    "full_name": "bazelbuild/rules_apple",
    "description": "Bazel rules to build apps for Apple platforms.",
    "stargazers_count": 556,
    "module_snippet": "bazel_dep(name = \"rules_apple\", version = \"4.1.2\", repo_name = \"build_bazel_rules_apple\")\r\n"
  },
  {
    "name": "rules_scala",
    "full_name": "bazel-contrib/rules_scala",
    "description": "Scala rules for Bazel",
    "stargazers_count": 376,
    "module_snippet": "# Set `repo_name = \"io_bazel_rules_scala\"` if you still need it.\nbazel_dep(name = \"rules_scala\", version = \"7.1.0\")\n",
    "registry": {
      "language": "scala",
      "extensions": [
        ".scala"
      ],
      "dep_files": [
        "build.sbt"
      ]
    }
  },
  {
    "name": "rules_oci",
    "full_name": "bazel-contrib/rules_oci",
    "description": "Bazel rules for building OCI containers",
    "stargazers_count": 374,
    "module_snippet": "bazel_dep(name = \"rules_oci\", version = \"2.2.6\")\n# For testing, we also recommend https://registry.bazel.build/modules/container_structure_test\n\noci = use_extension(\"@rules_oci//oci:extensions.bzl\", \"oci\")\n\n# Declare external images you need to pull, for example: \noci.pull(\n    name = \"distroless_base\",\n    # 'latest' is not reproducible, but it's convenient.\n    # During the build we print a WARNING message that includes recommended 'digest' and 'platforms'\n    # values which you can use here in place of 'tag' to pin for reproducibility.\n    tag = \"latest\",\n    image = \"gcr.io/distroless/base\",\n    platforms = [\"linux/amd64\"],\n)\n\n# For each oci.pull call, repeat the \"name\" here to expose them as dependencies.\nuse_repo(oci, \"distroless_base\")\n"
  },
  {
    "name": "rules_jvm_external",
    "full_name": "bazel-contrib/rules_jvm_external",
    "description": "Bazel rules to resolve, fetch and export Maven artifacts",
    "stargazers_count": 354,
    "module_snippet": "bazel_dep(name = \"rules_jvm_external\", version = \"6.8\")\r\n"
  },
  {
    "name": "rules_kotlin",
    "full_name": "bazelbuild/rules_kotlin",
    "description": "Bazel rules for Kotlin",
    "stargazers_count": 351,
    "module_snippet": "bazel_dep(name = \"rules_kotlin\", version = \"2.1.8\")\r\n"
  },
  {
    "name": "rules_nixpkgs",
    "full_name": "tweag/rules_nixpkgs",
    "description": "Rules for importing Nixpkgs packages into Bazel.",
    "stargazers_count": 345,
    "module_snippet": "bazel_dep(name = \"rules_nixpkgs_core\", version = \"0.13.0\")\r\n"
  },
  {
    "name": "rules_js",
    "full_name": "aspect-build/rules_js",
    "description": "High-performance Bazel rules for running Node.js tools and building JavaScript projects",
    "stargazers_count": 342,
    "module_snippet": "bazel_dep(name = \"aspect_rules_js\", version = \"2.4.2\")\n\n####### Node.js version #########\n# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl\n# Optionally you can pin a different node version:\nbazel_dep(name = \"rules_nodejs\", version = \"6.3.0\")\nnode = use_extension(\"@rules_nodejs//nodejs:extensions.bzl\", \"node\", dev_dependency = True)\nnode.toolchain(node_version = \"16.14.2\")\n#################################\n\nnpm = use_extension(\"@aspect_rules_js//npm:extensions.bzl\", \"npm\", dev_dependency = True)\n\nnpm.npm_translate_lock(\n    name = \"npm\",\n    pnpm_lock = \"//:pnpm-lock.yaml\",\n    verify_node_modules_ignored = \"//:.bazelignore\",\n)\n\nuse_repo(npm, \"npm\")\n\npnpm = use_extension(\"@aspect_rules_js//npm:extensions.bzl\", \"pnpm\")\n\n# Allows developers to use the matching pnpm version, for example:\n# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install\nuse_repo(pnpm, \"pnpm\")\n"
  },
  {
    "name": "rules_swift",
    "full_name": "bazelbuild/rules_swift",
    "description": "Bazel rules to build Swift on Apple and Linux platforms",
    "stargazers_count": 329,
    "module_snippet": "bazel_dep(name = \"rules_swift\", version = \"3.1.2\", repo_name = \"build_bazel_rules_swift\")\r\n",
    "registry": {
      "language": "swift",
      "extensions": [
        ".swift"
      ],
      "dep_files": [
        "Package.swift"
      ]
    }
  },
  {
    "name": "rules_ios",
    "full_name": "bazel-ios/rules_ios",
    "description": "Bazel rules for building iOS applications and frameworks",
    "stargazers_count": 293,
    "module_snippet": "bazel_dep(name = \"rules_ios\", version = \"6.0.1\", repo_name = \"build_bazel_rules_ios\")\n"
  },
  {
    "name": "rules_haskell",
    "full_name": "tweag/rules_haskell",
    "description": "Haskell rules for Bazel.",
    "stargazers_count": 276,
    "module_snippet": "bazel_dep(name = \"rules_haskell\", version = \"1.0\")\r\n",
    "registry": {
      "language": "haskell",
      "extensions": [
        ".hs"
      ],
      "dep_files": [
        "package.yaml"
      ]
    }
  },
  {
    "name": "rules_proto_grpc",
    "full_name": "rules-proto-grpc/rules_proto_grpc",
    "description": "Bazel rules for building Protobuf and gRPC code and libraries from proto_library targets",
    "stargazers_count": 267,
    "module_snippet": "bazel_dep(name = \"rules_proto_grpc_go\", version = \"5.6.0\")"
  },
  {
    "name": "rules_spring",
    "full_name": "salesforce/rules_spring",
    "description": "Bazel rule for building Spring Boot apps as a deployable jar",
    "stargazers_count": 243,
    "module_snippet": "bazel_dep(name = \"rules_spring\", version = \"2.6.3\")\r\n"
  },
  {
    "name": "rules_pkg",
    "full_name": "bazelbuild/rules_pkg",
    "description": "Bazel rules for creating packages of many types (zip, tar, deb, rpm, ...)",
    "stargazers_count": 239,
    "module_snippet": "bazel_dep(name = \"rules_pkg\", version = \"1.1.0\")\r\n"
  },
  {
    "name": "rules_cc",
    "full_name": "bazelbuild/rules_cc",
    "description": "C++ Rules for Bazel",
    "stargazers_count": 215,
    "module_snippet": "bazel_dep(name = \"rules_cc\", version = \"0.2.0\")\r\n"
  },
  {
    "name": "rules_dotnet",
    "full_name": "bazel-contrib/rules_dotnet",
    "description": ".NET rules for Bazel",
    "stargazers_count": 200,
    "module_snippet": "bazel_dep(name = \"rules_dotnet\", version = \"0.19.2\")\n\ndotnet = use_extension(\"@rules_dotnet//dotnet:extensions.bzl\", \"dotnet\")\ndotnet.toolchain(dotnet_version = \"8.0.200\")\nuse_repo(dotnet, \"dotnet_toolchains\")\n\nregister_toolchains(\"@dotnet_toolchains//:all\")\n\n",
    "registry": {
      "language": "c-sharp",
      "extensions": [
        ".cs"
      ],
      "dep_files": [
        "*.csproj"
      ]
    }
  },
  {
    "name": "rules_android",
    "full_name": "bazelbuild/rules_android",
    "description": "Android rules for Bazel",
    "stargazers_count": 193,
    "module_snippet": "# See examples/basicapp/MODULE.bazel.\r\nbazel_dep(name = \"rules_android\", version = \"0.6.6\")\r\nremote_android_extensions = use_extension(\r\n    \"@rules_android//bzlmod_extensions:android_extensions.bzl\",\r\n    \"remote_android_tools_extensions\")\r\nuse_repo(remote_android_extensions, \"android_tools\")\r\n\r\nandroid_sdk_repository_extension = use_extension(\"@rules_android//rules/android_sdk_repository:rule.bzl\", \"android_sdk_repository_extension\")\r\nuse_repo(android_sdk_repository_extension, \"androidsdk\")\r\n\r\nregister_toolchains(\"@androidsdk//:sdk-toolchain\", \"@androidsdk//:all\")\r\n"
  },
  {
    "name": "rules_proto",
    "full_name": "bazelbuild/rules_proto",
    "description": "Protocol buffer rules for Bazel",
    "stargazers_count": 170,
    "module_snippet": "bazel_dep(name = \"rules_proto\", version = \"7.1.0\")\n"
  },
  {
    "name": "rules_closure",
    "full_name": "bazelbuild/rules_closure",
    "description": "Closure rules for Bazel",
    "stargazers_count": 155,
    "module_snippet": "bazel_dep(name = \"rules_closure\", version = \"0.15.0\")",
    "registry": {
      "language": "clojure",
      "extensions": [
        ".clj"
      ],
      "dep_files": [
        "project.clj",
        "build.clj"
      ]
    }
  },
  {
    "name": "rules_ts",
    "full_name": "aspect-build/rules_ts",
    "description": "Bazel rules for the `tsc` compiler from http://typescriptlang.org",
    "stargazers_count": 123,
    "module_snippet": "bazel_dep(name = \"aspect_rules_ts\", version = \"3.7.0\")\n\nrules_ts_ext = use_extension(\"@aspect_rules_ts//ts:extensions.bzl\", \"ext\", dev_dependency = True)\n\nrules_ts_ext.deps(\n    ts_version_from = \"//:package.json\",\n)\n\nuse_repo(rules_ts_ext, \"npm_typescript\")\n"
  },
  {
    "name": "rules_py",
    "full_name": "aspect-build/rules_py",
    "description": "More compatible Bazel rules for running Python tools and building Python projects",
    "stargazers_count": 116,
    "module_snippet": "bazel_dep(name = \"aspect_rules_py\", version = \"1.6.3\")\n"
  },
  {
    "name": "rules_lint",
    "full_name": "aspect-build/rules_lint",
    "description": "Run static analysis tools with Bazel",
    "stargazers_count": 115,
    "module_snippet": "bazel_dep(name = \"aspect_rules_lint\", version = \"1.5.3\")\n\n# Next, follow the install instructions for\n# - linting: https://github.com/aspect-build/rules_lint/blob/v1.5.3/docs/linting.md\n# - formatting: https://github.com/aspect-build/rules_lint/blob/v1.5.3/docs/formatting.md\n"
  },
  {
    "name": "rules_cuda",
    "full_name": "bazel-contrib/rules_cuda",
    "description": "Starlark implementation of bazel rules for CUDA.",
    "stargazers_count": 112,
    "module_snippet": "bazel_dep(name = \"rules_cuda\", version = \"0.2.5\")"
  },
  {
    "name": "rules_multirun",
    "full_name": "keith/rules_multirun",
    "description": "Bazel rules for running multiple commands in parallel in a single bazel invocation",
    "stargazers_count": 102,
    "module_snippet": "bazel_dep(name = \"rules_multirun\", version = \"0.12.0\")\r\n"
  },
  {
    "name": "rules_swift_package_manager",
    "full_name": "cgrindel/rules_swift_package_manager",
    "description": "Collection of utilities and Bazel rules to aid in the development and maintenance of Swift repositories using Bazel.",
    "stargazers_count": 98,
    "module_snippet": "bazel_dep(name = \"rules_swift_package_manager\", version = \"1.4.0\")\n"
  },
  {
    "name": "rules_webtesting",
    "full_name": "bazelbuild/rules_webtesting",
    "description": "Bazel rules to allow testing against a browser with WebDriver.",
    "stargazers_count": 97,
    "module_snippet": "bazel_dep(name = \"rules_web_testing_scala\", version = \"0.4.1\")"
  },
  {
    "name": "rules_fuzzing",
    "full_name": "bazel-contrib/rules_fuzzing",
    "description": "Bazel Starlark extensions for defining fuzz tests in Bazel projects",
    "stargazers_count": 91,
    "module_snippet": "bazel_dep(name = \"rules_fuzzing\", version = \"0.6.0\")\n"
  },
  {
    "name": "rules_java",
    "full_name": "bazelbuild/rules_java",
    "description": "Java rules for Bazel",
    "stargazers_count": 89,
    "module_snippet": "bazel_dep(name = \"rules_java\", version = \"8.15.1\")\n",
    "registry": {
      "language": "java",
      "extensions": [
        ".java"
      ],
      "dep_files": [
        "pom.xml",
        "pom.atom",
        "pom.clj",
        "pom.groovy",
        "pom.rb",
        "pom.scala",
        "pom.yaml",
        "pom.yml"
      ]
    }
  },
  {
    "name": "rules_license",
    "full_name": "bazelbuild/rules_license",
    "description": "",
    "stargazers_count": 88,
    "module_snippet": "bazel_dep(name = \"rules_license\", version = \"1.0.0\")\r\n"
  },
  {
    "name": "rules_pycross",
    "full_name": "jvolkman/rules_pycross",
    "description": "Bazel + Python rules for cross-platform external dependencies",
    "stargazers_count": 80,
    "module_snippet": "bazel_dep(name = \"rules_pycross\", version = \"0.8.0\")\r\n"
  },
  {
    "name": "rules_distroless",
    "full_name": "bazel-contrib/rules_distroless",
    "description": "",
    "stargazers_count": 80,
    "module_snippet": "bazel_dep(name = \"rules_distroless\", version = \"0.5.3\")\n"
  },
  {
    "name": "rules_uv",
    "full_name": "theoremlp/rules_uv",
    "description": "Bazel rules for running uv",
    "stargazers_count": 78,
    "module_snippet": "bazel_dep(name = \"rules_uv\", version = \"0.87.0\")\n"
  },
  {
    "name": "rules_jsonnet",
    "full_name": "bazel-contrib/rules_jsonnet",
    "description": "Jsonnet rules for Bazel",
    "stargazers_count": 70,
    "module_snippet": "bazel_dep(name = \"rules_jsonnet\", version = \"0.7.2\")\n"
  },
  {
    "name": "rules_apple_linker",
    "full_name": "keith/rules_apple_linker",
    "description": "Bazel rules for overriding ld64 with lld or zld",
    "stargazers_count": 66,
    "module_snippet": "bazel_dep(name = \"rules_apple_linker\", version = \"0.5.2\")\r\n"
  },
  {
    "name": "rules_codeowners",
    "full_name": "zegl/rules_codeowners",
    "description": "Bazel rules for generating CODEOWNERS from a workspace.",
    "stargazers_count": 62,
    "module_snippet": "bazel_dep(name = \"rules_codeowners\", version = \"0.2.1\")"
  },
  {
    "name": "rules_bazel_integration_test",
    "full_name": "bazel-contrib/rules_bazel_integration_test",
    "description": "Rules and macros for executing integration tests that use Bazel. Supports running integration tests with multiple versions of Bazel.",
    "stargazers_count": 60,
    "module_snippet": "bazel_dep(\n    name = \"rules_bazel_integration_test\",\n    version = \"0.33.2\",\n    dev_dependency = True,\n)\n"
  },
  {
    "name": "rules_graalvm",
    "full_name": "sgammon/rules_graalvm",
    "description": "Build GraalVM native binaries with Bazel",
    "stargazers_count": 54,
    "module_snippet": "bazel_dep(name = \"rules_graalvm\", version = \"0.11.0\")\r\n"
  },
  {
    "name": "rules_buf",
    "full_name": "bufbuild/rules_buf",
    "description": "Bazel rules for Buf.",
    "stargazers_count": 54,
    "module_snippet": "bazel_dep(name = \"rules_buf\", version = \"0.5.1\")\r\n"
  },
  {
    "name": "rules_jvm",
    "full_name": "bazel-contrib/rules_jvm",
    "description": "Contributed Bazel rules that make working with java projects more pleasant",
    "stargazers_count": 51,
    "module_snippet": "bazel_dep(name = \"contrib_rules_jvm\", version = \"0.29.0\")"
  },
  {
    "name": "rules_zig",
    "full_name": "aherrmann/rules_zig",
    "description": "Bazel build rules for Zig",
    "stargazers_count": 50,
    "module_snippet": "bazel_dep(name = \"rules_zig\", version = \"0.9.0\")\r\n"
  },
  {
    "name": "rules_swc",
    "full_name": "aspect-build/rules_swc",
    "description": "Bazel rules for the swc toolchain https://swc.rs/",
    "stargazers_count": 47,
    "module_snippet": "bazel_dep(name = \"aspect_rules_swc\", version = \"2.4.4\")\n"
  },
  {
    "name": "rules_sh",
    "full_name": "tweag/rules_sh",
    "description": "Shell rules for Bazel",
    "stargazers_count": 47,
    "module_snippet": "bazel_dep(name = \"rules_sh\", version = \"0.5.0\")\r\n"
  },
  {
    "name": "rules_multitool",
    "full_name": "theoremlp/rules_multitool",
    "description": "Bazel rules for ergonomic tool definitions",
    "stargazers_count": 46,
    "module_snippet": "bazel_dep(name = \"rules_multitool\", version = \"1.9.0\")\n\nmultitool = use_extension(\"@rules_multitool//multitool:extension.bzl\", \"multitool\")\nmultitool.hub(lockfile = \"//:multitool.lock.json\")\nuse_repo(multitool, \"multitool\")\n"
  },
  {
    "name": "rules_ruby",
    "full_name": "bazel-contrib/rules_ruby",
    "description": "Ruby ruleset for Bazel",
    "stargazers_count": 43,
    "module_snippet": "bazel_dep(name = \"rules_ruby\", version = \"0.20.1\")\n"
  },
  {
    "name": "rules_android_ndk",
    "full_name": "bazelbuild/rules_android_ndk",
    "description": "",
    "stargazers_count": 39,
    "module_snippet": "bazel_dep(name = \"rules_android_ndk\", version = \"0.1.3\")\r\n"
  },
  {
    "name": "rules_erlang",
    "full_name": "rabbitmq/rules_erlang",
    "description": "Bazel rules for building Erlang applications and libraries",
    "stargazers_count": 36,
    "module_snippet": "bazel_dep(name = \"rules_erlang\", version = \"3.16.0\")"
  },
  {
    "name": "rules_img",
    "full_name": "tweag/rules_img",
    "description": "Modern Bazel rules for building OCI container images with advanced performance optimizations",
    "stargazers_count": 34,
    "module_snippet": "bazel_dep(name = \"rules_img\", version = \"0.1.5\")"
  },
  {
    "name": "rules_helm",
    "full_name": "abrisco/rules_helm",
    "description": "Bazel rules for producing Helm charts",
    "stargazers_count": 34,
    "module_snippet": "bazel_dep(name = \"rules_helm\", version = \"0.15.0\")"
  },
  {
    "name": "rules_esbuild",
    "full_name": "aspect-build/rules_esbuild",
    "description": "Bazel rules for https://esbuild.github.io/ JS bundler",
    "stargazers_count": 32,
    "module_snippet": "bazel_dep(name = \"aspect_rules_esbuild\", version = \"0.22.1\")\n"
  },
  {
    "name": "rules_apko",
    "full_name": "chainguard-dev/rules_apko",
    "description": "Bazel rules for apko",
    "stargazers_count": 32,
    "module_snippet": "bazel_dep(name = \"rules_apko\", version = \"1.5.8\")\n"
  },
  {
    "name": "rules_mypy",
    "full_name": "theoremlp/rules_mypy",
    "description": "a Bazel mypy aspect",
    "stargazers_count": 30,
    "module_snippet": "bazel_dep(name = \"rules_mypy\", version = \"0.40.0\")\n"
  },
  {
    "name": "rules_appimage",
    "full_name": "lalten/rules_appimage",
    "description": "Bazel rules to create portable Linux applications by bundling a binary target and all its runfiles into a self-contained AppImage binary.",
    "stargazers_count": 30,
    "module_snippet": "bazel_dep(name = \"rules_appimage\", version = \"1.18.0\")\r\n"
  },
  {
    "name": "rules_perl",
    "full_name": "bazel-contrib/rules_perl",
    "description": "Perl rules for Bazel",
    "stargazers_count": 29,
    "module_snippet": "bazel_dep(name = \"rules_perl\", version = \"0.4.2\")"
  },
  {
    "name": "rules_jni",
    "full_name": "fmeum/rules_jni",
    "description": "Java Native Interface (JNI) rules for Bazel",
    "stargazers_count": 29,
    "module_snippet": "bazel_dep(name = \"rules_jni\", version = \"0.11.0\")\r\n"
  },
  {
    "name": "rules_elm",
    "full_name": "kczulko/rules_elm",
    "description": "Bazel rules for building web applications written in Elm",
    "stargazers_count": 27,
    "module_snippet": "bazel_dep(name = \"rules_elm\", version = \"1.1.0\")\r\n\r\n# Declare external elm dependencies, for example:\r\nelm = use_extension(\"@rules_elm//elm:extensions.bzl\", \"elm\")\r\nelm.repository(\r\n    name = \"elm_package_elm_core\",\r\n    sha256 = \"6e37b11c88c89a68d19d0c7625f1ef39ed70c59e443def95e4de98d6748c80a7\",\r\n    strip_prefix = \"core-1.0.5\",\r\n    urls = [\"https://github.com/elm/core/archive/1.0.5.tar.gz\"],\r\n)\r\nuse_repo(elm, \"elm_package_elm_core\")\r\n\r\n"
  },
  {
    "name": "rules_pkl",
    "full_name": "apple/rules_pkl",
    "description": "Bazel build rules for Pkl",
    "stargazers_count": 26,
    "module_snippet": "# Please check the releases page on GitHub for the latest released version\r\nbazel_dep(name = \"rules_pkl\", version = \"0.9.0\")\r\n"
  },
  {
    "name": "rules_testing",
    "full_name": "bazelbuild/rules_testing",
    "description": "Starlark testing framework and utility libraries",
    "stargazers_count": 25,
    "module_snippet": "bazel_dep(name = \"rules_testing\", version = \"0.9.0\")"
  },
  {
    "name": "rules_jest",
    "full_name": "aspect-build/rules_jest",
    "description": "Bazel rules to run tests using https://jestjs.io",
    "stargazers_count": 24,
    "module_snippet": "bazel_dep(name = \"aspect_rules_jest\", version = \"0.23.3\")\n"
  },
  {
    "name": "rules_d",
    "full_name": "bazel-contrib/rules_d",
    "description": "D rules for Bazel",
    "stargazers_count": 24,
    "module_snippet": "bazel_dep(name = \"rules_d\", version = \"0.1.2\")\n\nd = use_extension(\"//d:extensions.bzl\", \"d\")\nd.toolchain(d_version = \"auto\")\nuse_repo(d, \"d_toolchains\")\n\nregister_toolchains(\"@d_toolchains//:all\")\n"
  },
  {
    "name": "rules_shellcheck",
    "full_name": "aignas/rules_shellcheck",
    "description": "Run shellcheck as part of your bazel tests.",
    "stargazers_count": 20,
    "module_snippet": "bazel_dep(name = \"rules_shellcheck\", version = \"0.4.0\")\n"
  },
  {
    "name": "rules_shell",
    "full_name": "bazelbuild/rules_shell",
    "description": "",
    "stargazers_count": 19,
    "module_snippet": "bazel_dep(name = \"rules_shell\", version = \"0.5.1\")\n"
  },
  {
    "name": "rules_itest",
    "full_name": "dzbarsky/rules_itest",
    "description": "Bazel rules for integration testing services",
    "stargazers_count": 19,
    "module_snippet": "bazel_dep(name = \"rules_itest\", version = \"0.0.36\")"
  },
  {
    "name": "rules_bison",
    "full_name": "jmillikin/rules_bison",
    "description": "Bazel build rules for GNU Bison",
    "stargazers_count": 19,
    "module_snippet": "bazel_dep(name = \"rules_bison\", version = \"0.4\")"
  },
  {
    "name": "rules_tf",
    "full_name": "yanndegat/rules_tf",
    "description": "bazel rules for terraform / tofu",
    "stargazers_count": 18,
    "module_snippet": "bazel_dep(name = \"rules_tf\", version = \"0.0.10\")\n"
  },
  {
    "name": "rules_python_pytest",
    "full_name": "caseyduquettesc/rules_python_pytest",
    "description": "Bazel rules to run Python tests with pytest",
    "stargazers_count": 18,
    "module_snippet": "bazel_dep(name = \"caseyduquettesc_rules_python_pytest\", version = \"1.1.1\", repo_name = \"rules_python_pytest\")\r\n"
  },
  {
    "name": "rules_m4",
    "full_name": "jmillikin/rules_m4",
    "description": "Bazel build rules for GNU M4",
    "stargazers_count": 18,
    "module_snippet": "bazel_dep(name = \"rules_m4\", version = \"0.3\")"
  },
  {
    "name": "rules_cue",
    "full_name": "seh/rules_cue",
    "description": "CUE rules for Bazel",
    "stargazers_count": 18,
    "module_snippet": "bazel_dep(name = \"rules_cue\", version = \"0.14.1\")\n"
  },
  {
    "name": "rules_flex",
    "full_name": "jmillikin/rules_flex",
    "description": "Bazel build rules for Flex",
    "stargazers_count": 17,
    "module_snippet": "bazel_dep(name = \"rules_flex\", version = \"0.4\")"
  },
  {
    "name": "rules_playwright",
    "full_name": "mrmeku/rules_playwright",
    "description": "",
    "stargazers_count": 15,
    "module_snippet": "bazel_dep(name = \"rules_playwright\", version = \"0.4.0\")\n\nplaywright = use_extension(\"@rules_playwright//playwright:extensions.bzl\", \"playwright\")\nplaywright.repo(\n    name = \"playwright\",\n    playwright_version = \"\", # Match the exact version from your pnpm lock file of playwright-core\n    browser_json = \"\", # Or vendor the browsers.json file from playwright core into your repo\n)\nuse_repo(playwright, \"playwright\")\n"
  },
  {
    "name": "rules_aws",
    "full_name": "aspect-build/rules_aws",
    "description": "EXPERIMENTAL: Bazel Integration for Amazon Web Services",
    "stargazers_count": 15,
    "module_snippet": "bazel_dep(name = \"aspect_rules_aws\", version = \"0.6.1\")\n"
  },
  {
    "name": "rules_mojo",
    "full_name": "modular/rules_mojo",
    "description": "bazel rules for building Mojo 🔥",
    "stargazers_count": 13,
    "module_snippet": "bazel_dep(name = \"rules_mojo\", version = \"0.5.0\")\r\n"
  },
  {
    "name": "rules_cypress",
    "full_name": "aspect-build/rules_cypress",
    "description": "Bazel rules for https://www.cypress.io",
    "stargazers_count": 12,
    "module_snippet": "bazel_dep(name = \"aspect_rules_cypress\", version = \"0.7.2\")"
  },
  {
    "name": "rules_platform",
    "full_name": "bazelbuild/rules_platform",
    "description": "",
    "stargazers_count": 11,
    "module_snippet": "bazel_dep(name = \"rules_platform\", version = \"0.1.0\")\n"
  },
  {
    "name": "rules_build_error",
    "full_name": "yuyawk/rules_build_error",
    "description": "Bazel rules to test a build error ",
    "stargazers_count": 11,
    "module_snippet": "bazel_dep(name = \"rules_build_error\", version = \"0.8.6\")\r\n"
  },
  {
    "name": "rules_elixir",
    "full_name": "rabbitmq/rules_elixir",
    "description": "",
    "stargazers_count": 10,
    "module_snippet": "bazel_dep(name = \"rules_elixir\", version = \"1.1.0\")"
  },
  {
    "name": "rules_terser",
    "full_name": "aspect-build/rules_terser",
    "description": "Bazel rules for https://terser.org/ - a JavaScript minifier",
    "stargazers_count": 9,
    "module_snippet": "bazel_dep(name = \"aspect_rules_terser\", version = \"2.0.1\")"
  },
  {
    "name": "rules_gcs",
    "full_name": "tweag/rules_gcs",
    "description": "Bazel rules for downloading files from Google Cloud Storage",
    "stargazers_count": 9,
    "module_snippet": "bazel_dep(name = \"rules_gcs\", version = \"1.0.1\")"
  },
  {
    "name": "rules_pydeps",
    "full_name": "theoremlp/rules_pydeps",
    "description": "a Bazel Python deps enforcer",
    "stargazers_count": 8,
    "module_snippet": "bazel_dep(name = \"rules_pydeps\", version = \"0.5.0\")\n"
  },
  {
    "name": "rules_contest",
    "full_name": "nya3jp/rules_contest",
    "description": "Bazel rules for automating everything about programming contest problem preparation",
    "stargazers_count": 8,
    "module_snippet": "bazel_dep(name = \"rules_contest\", version = \"0.9.3\")"
  },
  {
    "name": "rules_kustomize",
    "full_name": "seh/rules_kustomize",
    "description": "kustomize rules for Bazel",
    "stargazers_count": 7,
    "module_snippet": "bazel_dep(name = \"rules_kustomize\", version = \"0.5.0\")\n"
  },
  {
    "name": "rules_angular",
    "full_name": "devversion/rules_angular",
    "description": "Bazel rules for Angular with `rules_js`",
    "stargazers_count": 7,
    "module_snippet": "bazel_dep(name = \"rules_angular\", version = \"0.1.0\")\n"
  },
  {
    "name": "rules_s3",
    "full_name": "tweag/rules_s3",
    "description": "Bazel rules for downloading files from S3 and S3-compatible object storage",
    "stargazers_count": 6,
    "module_snippet": "bazel_dep(name = \"rules_s3\", version = \"1.0.1\")"
  },
  {
    "name": "rules_rollup",
    "full_name": "aspect-build/rules_rollup",
    "description": "Bazel rules for https://rollupjs.org/ - a JavaScript bundler",
    "stargazers_count": 6,
    "module_snippet": "bazel_dep(name = \"aspect_rules_rollup\", version = \"2.0.1\")"
  },
  {
    "name": "rules_probe_rs",
    "full_name": "hexdae/rules_probe_rs",
    "description": "Bazel support for probe.rs",
    "stargazers_count": 6,
    "module_snippet": "bazel_dep(name = \"rules_probe_rs\", version = \"0.0.6\")\n\nprobe_rs = use_extension(\"@rules_probe_rs//probe_rs:extensions.bzl\", \"probe_rs\")\nprobe_rs.tools(\n    name = \"probe_rs\",\n    version = \"0.27.0\",\n)\nuse_repo(probe_rs, \"probe_rs\")\n"
  },
  {
    "name": "rules_jasmine",
    "full_name": "aspect-build/rules_jasmine",
    "description": "",
    "stargazers_count": 6,
    "module_snippet": "bazel_dep(name = \"aspect_rules_jasmine\", version = \"2.0.0\")\n"
  },
  {
    "name": "rules_docker_compose_test",
    "full_name": "salesforce/rules_docker_compose_test",
    "description": "",
    "stargazers_count": 6,
    "module_snippet": "## MODULE.bazel\nbazel_dep(name = \"rules_docker_compose_test\", version = \"1.2.0\")\n"
  },
  {
    "name": "rules_doxygen",
    "full_name": "TendTo/rules_doxygen",
    "description": "Starlark implementation of Doxygen rules in Bazel to automatically document the codebase",
    "stargazers_count": 5,
    "module_snippet": "bazel_dep(name = \"rules_doxygen\", version = \"2.4.2\")"
  },
  {
    "name": "rules_wasm",
    "full_name": "vimana-cloud/rules_wasm",
    "description": "Bazel tools for working with WebAssembly components",
    "stargazers_count": 4,
    "module_snippet": "bazel_dep(name = \"rules_wasm\", version = \"1.1.1\")"
  },
  {
    "name": "rules_openscad",
    "full_name": "roleroz/rules_openscad",
    "description": "Bazel rules to use OpenSCAD",
    "stargazers_count": 4,
    "module_snippet": "bazel_dep(name = \"rules_openscad\", version = \"0.1\")"
  },
  {
    "name": "rules_vulkan",
    "full_name": "mxpv/rules_vulkan",
    "description": "Bazel rules to build Vulkan applications",
    "stargazers_count": 3,
    "module_snippet": "bazel_dep(name = \"rules_vulkan\", version = \"0.6.1\")\n"
  },
  {
    "name": "rules_venv",
    "full_name": "periareon/rules_venv",
    "description": "Bazel rules for Python.",
    "stargazers_count": 3,
    "module_snippet": "bazel_dep(name = \"rules_venv\", version = \"0.4.0\")\n"
  },
  {
    "name": "rules_nasm",
    "full_name": "morganwl/rules_nasm",
    "description": "Netwide Assembler (nasm) toolchain for Bazel",
    "stargazers_count": 3,
    "module_snippet": "bazel_dep(name = \"rules_nasm\", version = \"0.3.1\")\r\n\r\n# configure the toolchain\r\nregister_toolchains(\r\n    \"@rules_nasm//nasm/toolchain\",\r\n    dev_dependency = True,\r\n)\r\n"
  },
  {
    "name": "rules_ispc",
    "full_name": "Vertexwahn/rules_ispc",
    "description": "Bazel rules for Intel Implicit SPMD Program Compiler",
    "stargazers_count": 3,
    "module_snippet": "bazel_dep(name = \"rules_ispc\", version = \"0.0.5\")\n\nispc = use_extension(\"@rules_ispc//:extensions.bzl\", \"ispc\")\nispc.download()\n\nuse_repo(\n    ispc,\n    \"ispc_linux_x86_64\",\n    \"ispc_windows_x86_64\",\n    \"ispc_osx_x86_64\",\n    \"ispc_osx_arm64\"\n)\n\nregister_toolchains(\n    \"@rules_ispc//tools:all\",\n    dev_dependency = True,\n)\n"
  },
  {
    "name": "rules_ytt",
    "full_name": "ekhabarov/rules_ytt",
    "description": "Bazel rules for YAML templating tool https://carvel.dev/ytt/",
    "stargazers_count": 2,
    "module_snippet": "bazel_dep(name = \"rules_ytt\", version = \"0.4.0\")\r\n"
  },
  {
    "name": "rules_pact",
    "full_name": "opicaud/rules_pact",
    "description": "",
    "stargazers_count": 2,
    "module_snippet": "bazel_dep(name = \"rules_pact\", version = \"1.1.9\")"
  },
  {
    "name": "rules_gazebo",
    "full_name": "gazebosim/rules_gazebo",
    "description": "Gazebo rules for Bazel",
    "stargazers_count": 2,
    "module_snippet": "bazel_dep(name = \"rules_gazebo\", version = \"v0.0.6\")\n"
  },
  {
    "name": "rules_cpan",
    "full_name": "lalten/rules_cpan",
    "description": "CPAN deps for Bazel Perl",
    "stargazers_count": 2,
    "module_snippet": "bazel_dep(name = \"rules_cpan\", version = \"1.1.0\")"
  },
  {
    "name": "rules_cc_resources",
    "full_name": "ClangTools/rules_cc_resources",
    "description": "bazel rules cc resource ",
    "stargazers_count": 2,
    "module_snippet": "bazel_dep(name = \"rules_cc_resources\", version = \"0.2.0\")"
  },
  {
    "name": "rules_synology",
    "full_name": "chickenandpork/rules_synology",
    "description": "Bazel Rules to build SPKs for Synology products",
    "stargazers_count": 1,
    "module_snippet": "bazel_dep(name = \"rules_synology\", version = \"0.2.3\")"
  },
  {
    "name": "rules_spring_aot",
    "full_name": "tharakadesilva/rules_spring_aot",
    "description": "",
    "stargazers_count": 1,
    "module_snippet": "bazel_dep(name = \"rules_spring_aot\", version = \"0.1.0\")\n"
  },
  {
    "name": "rules_quickjs",
    "full_name": "bzlparty/rules_quickjs",
    "description": "Bazel Rules for QuickJS",
    "stargazers_count": 1,
    "module_snippet": "bazel_dep(name = \"bzlparty_rules_quickjs\", version = \"0.1.0\")\r\n"
  },
  {
    "name": "rules_mayhem",
    "full_name": "ForAllSecure/rules_mayhem",
    "description": "Bazel rules for generating Mayhemfiles",
    "stargazers_count": 1,
    "module_snippet": "bazel_dep(name = \"rules_mayhem\", version = \"0.8.3\")"
  },
  {
    "name": "rules_autoconf",
    "full_name": "dzbarsky/rules_autoconf",
    "description": "",
    "stargazers_count": 1,
    "module_snippet": "bazel_dep(name = \"com_myorg_rules_autoconf\", version = \"0.0.9\")\n"
  },
  {
    "name": "rules_tcl",
    "full_name": "abrisco/rules_tcl",
    "description": "Bazel rules for the Tcl programming language",
    "stargazers_count": 0,
    "module_snippet": "bazel_dep(name = \"rules_tcl\", version = \"0.0.1\")\n"
  },
  {
    "name": "rules_poetry",
    "full_name": "oxidase/rules_poetry",
    "description": "",
    "stargazers_count": 0,
    "module_snippet": "bazel_dep(name = \"rules_poetry\", version = \"0.3.6\")\r\n\r\npoetry = use_extension(\"@rules_poetry//python:extensions.bzl\", \"poetry\")\r\npoetry.parse(\r\n    name = \"poetry\",\r\n    lock = \"//:poetry.lock\",\r\n)\r\nuse_repo(poetry, \"poetry\")\r\n"
  },
  {
    "name": "rules_nccl",
    "full_name": "MoFHeka/rules_nccl",
    "description": "",
    "stargazers_count": 0,
    "module_snippet": "bazel_dep(name = \"rules_nccl\", version = \"0.0.1\")"
  },
  {
    "name": "rules_mjml",
    "full_name": "mathematic-inc/rules_mjml",
    "description": "Bazel rules for Mailjet Markup Language",
    "stargazers_count": 0,
    "module_snippet": "bazel_dep(name = \"rules_mjml\", version = \"0.2.5\")"
  },
  {
    "name": "rules_devicetree",
    "full_name": "bazel-contrib/rules_devicetree",
    "description": "Devicetree rules for Bazel",
    "stargazers_count": 0,
    "module_snippet": "bazel_dep(name = \"rules_devicetree\", version = \"0.1.3\")\n"
  },
  {
    "name": "rules_browsers",
    "full_name": "devversion/rules_browsers",
    "description": "Bazel rules for browser automation & testing",
    "stargazers_count": 0,
    "module_snippet": "bazel_dep(name = \"rules_browsers\", version = \"0.2.0\")"
  },
  {
    "name": "rules_abs",
    "full_name": "michaeljs1990/rules_abs",
    "description": "Bazel rules for downloading files from Azure Blob Storage",
    "stargazers_count": 0,
    "module_snippet": "bazel_dep(name = \"rules_abs\", version = \"0.1.0\")\r\n"
  }
]

